"use strict";

let path = require("path"); // техническая переменная, необходимая для правильной работы

module.exports = {
  // объект настроек
  mode: "development", // режим работы, их два (development и production(по умолчанию, работает медленнее, в него встроены оптимизаторы кода))
  entry: "./src/js/script.js", // энтри поинт, тот файл, с которого будем начинать, обычно в нем прописаны все зависимости, require или import
  output: {
    // файл выхода, задаем только в виде объекта, в который будет собираться код
    filename: "bundle.js", // название
    path: __dirname + "/src/js", // путь к итоговому файлу. Переменная __dirname позволяет получить доступ к корню нашей папки проекта
  },
  watch: true, // если true, то webpack будет отслеживать изменение нашего файла и будет собирать проект при каждом сэйве наших файлов

  devtool: "source-map", // source-map хранит информацию об исходниках кода для финальной сборки

  module: {
    // модули для webpack и их настройка
    rules: [
      // правила, которые будут действовать для определенных файлов
      {
        test: /\.m?js$/, // находим наши js файлы
        exclude: /(node_modules|bower_components)/, // какие файлы мы исключаем из этой выборки
        use: {
          // описываем как и что мы будем использовать
          loader: "babel-loader", // используем модуль, который будет связывать webpack и babel
          options: {
            // передаем настройки лоадера
            presets: [
              [
                "@babel/preset-env",
                {
                  // используем и настраиваем пресет babel
                  debug: true, // всключается свойство debug, во время компиляции дает представление о процессе
                  corejs: 3, // версия corejs
                  useBuiltIns: "usage", // та самая крутая функция, которая анализирует код и подключает только те полифиллы, которые нужны.
                },
              ],
            ],
          },
        },
      },
    ],
  },

  // также может быть еще свойство plugins, оно нужно для подключения различных плагинов, но используется не часто, т.к. все нужные плагины уже есть в webpack
};
